// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package completor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompletorClient is the client API for Completor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompletorClient interface {
	// Sends a greeting
	AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error)
	BuildTrie(ctx context.Context, in *BuildTrieRequest, opts ...grpc.CallOption) (*BuildTrieResponse, error)
}

type completorClient struct {
	cc grpc.ClientConnInterface
}

func NewCompletorClient(cc grpc.ClientConnInterface) CompletorClient {
	return &completorClient{cc}
}

func (c *completorClient) AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error) {
	out := new(AutoCompleteResponse)
	err := c.cc.Invoke(ctx, "/completor.Completor/AutoComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *completorClient) BuildTrie(ctx context.Context, in *BuildTrieRequest, opts ...grpc.CallOption) (*BuildTrieResponse, error) {
	out := new(BuildTrieResponse)
	err := c.cc.Invoke(ctx, "/completor.Completor/BuildTrie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompletorServer is the server API for Completor service.
// All implementations must embed UnimplementedCompletorServer
// for forward compatibility
type CompletorServer interface {
	// Sends a greeting
	AutoComplete(context.Context, *AutoCompleteRequest) (*AutoCompleteResponse, error)
	BuildTrie(context.Context, *BuildTrieRequest) (*BuildTrieResponse, error)
	mustEmbedUnimplementedCompletorServer()
}

// UnimplementedCompletorServer must be embedded to have forward compatible implementations.
type UnimplementedCompletorServer struct {
}

func (UnimplementedCompletorServer) AutoComplete(context.Context, *AutoCompleteRequest) (*AutoCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoComplete not implemented")
}
func (UnimplementedCompletorServer) BuildTrie(context.Context, *BuildTrieRequest) (*BuildTrieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildTrie not implemented")
}
func (UnimplementedCompletorServer) mustEmbedUnimplementedCompletorServer() {}

// UnsafeCompletorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompletorServer will
// result in compilation errors.
type UnsafeCompletorServer interface {
	mustEmbedUnimplementedCompletorServer()
}

func RegisterCompletorServer(s grpc.ServiceRegistrar, srv CompletorServer) {
	s.RegisterService(&Completor_ServiceDesc, srv)
}

func _Completor_AutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompletorServer).AutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/completor.Completor/AutoComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompletorServer).AutoComplete(ctx, req.(*AutoCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Completor_BuildTrie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildTrieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompletorServer).BuildTrie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/completor.Completor/BuildTrie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompletorServer).BuildTrie(ctx, req.(*BuildTrieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Completor_ServiceDesc is the grpc.ServiceDesc for Completor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Completor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "completor.Completor",
	HandlerType: (*CompletorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoComplete",
			Handler:    _Completor_AutoComplete_Handler,
		},
		{
			MethodName: "BuildTrie",
			Handler:    _Completor_BuildTrie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "completor/completor.proto",
}
